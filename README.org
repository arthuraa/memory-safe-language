This file summarizes the structure of our development, highlighting
the the most important notions and results covered in each file.

* Preliminaries

This has been tested with Coq version 8.5 and uses the Ssreflect
and MathComp libraries, both in version 1.6.

To compile, just hit "make".

* Files

** coq-utils

CoqUtils, as its name suggests, is a basic library of Coq utilities
based on the Ssreflect and MathComp libraries. Most of it is of
general interest, not being particularly relevant to the present
development. The exception is the nominal.v file, which is a
formalization of the theory of nominal sets that we used for the rest
of our development.

That formalization departs from the way the theory was presented in
the review of our paper in a few aspects. In particular:

- A nominal set is defined by a Coq structure (in the Ssreflect
  class-and-mixin style) that is assumed to have a decidable total
  order relation. Furthermore, we assume that the support of an
  element can be effectively computed with a function (function
  "names" in the formalization).

- To avoid using extra axioms (namely, functional extensionality) and
  violating the above requirements, we deal with equivariant functions
  and functions with finite support in an ad-hoc way: we do not endow
  them with nominal set structures as defined above.

- We do not formalize the single-variable binding functor, only the
  free restriction algebra one (which we call, perhaps confusingly,
  "bound" in that file). The reason for that is that in our main
  development we define the restriction operator nu (called "new" in
  the development) as taking a finitely supported function as an
  argument instead of an element with a single variable. This
  potentially complicates a few constructions, but it allows us to use
  Coq binders when describing heaps with bound atoms, which makes the
  syntax a bit nicer.

** basics.v

This file sets up the basic definitions for our language. It starts by
defining various types used throughout the development, including the
syntax of expressions and commands. To simplify the rest of the
development, this semantics is parameterized over a type of program
states and a few functions over that type, so that we can instantiate
it with "raw" program states (as done in the first, unstructured
version of the language), and program states with restricted names
(cf. structured.v). Instead of being defined relationally, as done in
the paper, we opt for an executable definition, which defines an
interpreter for the language that takes a starting state, a program,
and a number of steps to run for, and returns the result of running
that command on that state. This means that we prove our main results
here by induction on the number of steps, as opposed to induction on
a relation.

** structured.v

This file defines the instance of the language semantics based on the
free name restriction construction. It also prove the main results of
the paper for that semantics.

** logic.v

This file defines some basic heap-building functions, following the
section on program verification, and proves some properties about
them. It does not define triples, and it does not include the program
verification examples.

** cast.v

This file proves a weaker integrity property for an unstructured
version of the semantics that features a cast operator.
